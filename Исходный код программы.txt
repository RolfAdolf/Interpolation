#–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞
import numpy as np
import matplotlib.pyplot as pl
import pandas as pd
#


######–§–£–ù–ö–¶–ò–ò –õ–ê–ì–†–ê–ù–ñ–ê:
def l(x, X, k):
    lk = 1
    for i in range(len(X)):
        if (k != i):
            lk *= (x - X[i])/(X[k] - X[i])
    return lk
#



#######–ú–ï–¢–û–î –õ–ê–ì–†–ê–ù–ñ–ê –ü–û –†–ê–í–ù–û–û–¢–°–¢–û–Ø–©–ò–ú –£–ó–õ–ê–ú:
def Ln(f, x, n, a, b):
    X = np.linspace(a, b, n)
    P = 0
    for i in range(n):
        P += l(x, X, i)*f(X[i])
    return P
#



#####–ú–ï–¢–û–î –õ–ê–ì–†–ê–ù–ñ–ê –ü–û –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ô –°–ï–¢–ö–ï:
def LnOpt(f, x, N, a, b):
    X = []
    n = N-1
    for i in range(n+1):
        xi = 1/2* ( (b-a)*np.cos( (2*i+1)*np.pi/(2*(n+1)) ) + (b+a) )
        X.append(xi)
    P = 0
    for i in range(n+1):
        P += l(x, X, i)*f(X[i])
    return P
#

######–í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò:
def g(X, i, k):
    result = 1
    for j in range(k+1):
        if (j != i):
            result *= 1/(X[i] - X[j])
    return result
#
######–ö–û–ù–ï–ß–ù–´–ï –†–ê–ó–ù–û–°–¢–ò:
def F(X, f, k):
    Y = list( map(f, X) )
    result = 0
    for i in range(k+1):
        result += Y[i]*g(X, i, k)
    return result
#



#########–ú–ï–¢–û–î –ù–¨–Æ–¢–û–ù–ê –ü–û –†–ê–í–ù–û–û–¢–°–¢–û–Ø–©–ò–ú –£–ó–õ–ê–ú:
def Newton(f, x, N, a, b):
    X = np.linspace(a, b, N)
    P = 0
    w = 1
    for i in range(N):
        P += F(X, f, i)*w
        w *= (x - X[i])
    return P
#


#########–ú–ï–¢–û–î –ù–¨–Æ–¢–û–ù–ê –ü–û –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ô –°–ï–¢–ö–ï:
def NewtonOpt(f, x, N, a, b):
    X = []
    for i in range(N):
        xi = 1/2* ( (b-a)*np.cos( (2*i+1)*np.pi/(2*N) ) + (b+a) )
        X.append(xi)
    P = 0
    w = 1
    for i in range(N):
        P += F(X, f, i)*w
        w *= (x - X[i])
    return P
#


#########–°–ü–õ–ê–ô–ù S1,0:
#####–ü–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–π —Å–µ—Ç–∫–µ:
def Sp10(f, x, N, a, b):

    X = np.linspace(a, b, N)
    h = (b-a)/(N-1)
    i = int(abs((x-a))//h)
    if (X[N-1] != x):
        x0 = X[i]
        x1 = X[i+1]
        y0 = f(x0)
        y1 = f(x1)
    else:
        return f(X[N-1])

    return (y1 - y0)*x / (x1 - x0) - (y1 - y0) * x0 / (x1 - x0) + y0


#########–ü–æ –ø–æ—Ç–∏–º–∞–ª—å–Ω–æ–π:
#########–°–ü–õ–ê–ô–ù S1,0:
def Sp10Opt(f, x, N, a, b):
    i = 0
    X = []
    for j in range(N):
        xj = 1/2* ( (b-a)*np.cos( (2*j+1)*np.pi/(2*N) ) + (b+a) )
        X.append(xj)
    X.sort()
    for j in range(N):
        if (X[j] < x):
            i = j
    if (x > X[N-1]):
        i -= 1
    x0 = X[i]
    x1 = X[i+1]
    y0 = f(x0)
    y1 = f(x1)

    return (y1 - y0)*x / (x1 - x0) - (y1 - y0) * x0 / (x1 - x0) + y0




#########–°–ü–õ–ê–ô–ù S2,1:
def Sp21(f, x, N, a, b):
    X = np.linspace(a, b, N)
    h = (b-a)/(N-1)
    i = int(abs((x-a))//h)
    l = 0
    if (i != (N-1)):
        for j in range(i+1):
            x0 = X[j]
            x1 = X[j+1]
            y0 = f(x0)
            y1 = f(x1)
            A = ( (y1 - y0) - l*(x1-x0) ) / ( (x1-x0)**2 )
            B = l - 2*A*x0
            c = y0 + A*(x0**2) - l*x0
            l = 2*A*x1 + B
        return A*(x**2) + B*x+c
    else:
        return f(X[i])



#########–°–ü–õ–ê–ô–ù S2,1 –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–µ:
def Sp21Opt(f, x, N, a, b):
    i = 0
    X = []
    l = 0
    for j in range(N):
        xj = 1/2* ( (b-a)*np.cos( (2*j+1)*np.pi/(2*N) ) + (b+a) )
        X.append(xj)
    X.sort()
    for j in range(N):
        if (X[j] < x):
            i = j
    if (x > X[N-1]):
        i -= 1
    for j in range(i+1):
        x0 = X[j]
        x1 = X[j+1]
        y0 = f(x0)
        y1 = f(x1)
        A = ( (y1 - y0) - l*(x1-x0) ) / ( (x1-x0)**2 )
        B = l - 2*A*x0
        c = y0 + A*(x0**2) - l*x0
        l = 2*A*x1 + B
    return A*(x**2) + B*x+c


#########–°–ü–õ–ê–ô–ù S3,2:
def Sp32(f, x, N, a, b):
    X = np.linspace(a, b, N)
    h = (b-a)/(N-1)
    i = int(abs((x-a))//h)
    l1 = 0
    l2 = 0
    if (i != (N-1)):
        for j in range(i+1):
            x0 = X[j]
            x1 = X[j+1]
            y0 = f(x0)
            y1 = f(x1)
            A = l2/(2 * (x0-x1) ) - l1/( (x0-x1)**2 ) - (y1 - y0)/( (x0-x1)**3 )
            B = (1/2)*(l2 - 6*A*x0)
            c = 3*A*(x0**2) - l2*x0 + l1
            d = y1 - A*(x1**3) - (1/2)*l2*(x1**2) + 3*A*x0*(x1**2) - 3*A*x1*(x0**2) + l2*x0*x1 - l1*x1
            l1 = 3*A*(x1**2) + 2*B*x1 + c
            l2 = 6*A*x1 + 2*B
        return A*(x**3) + B*(x**2)+c*x + d
    else:
        return f(X[i])

#########–°–ü–õ–ê–ô–ù S3,2 –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å–µ—Ç–∫–µ:
def Sp32Opt(f, x, N, a, b):
    i = 0
    X = []
    l1 = 0
    l2 = 0
    for j in range(N):
        xj = 1/2* ( (b-a)*np.cos( (2*j+1)*np.pi/(2*N) ) + (b+a) )
        X.append(xj)
    X.sort()
    for j in range(N):
        if (X[j] < x):
            i = j
    if (x > X[N-1]):
        i -= 1
    for j in range(i+1):
        x0 = X[j]
        x1 = X[j+1]
        y0 = f(x0)
        y1 = f(x1)
        A = l2/(2 * (x0-x1) ) - l1/( (x0-x1)**2 ) - (y1 - y0)/( (x0-x1)**3 )
        B = (1/2)*(l2 - 6*A*x0)
        c = 3*A*(x0**2) - l2*x0 + l1
        d = y1 - A*(x1**3) - (1/2)*l2*(x1**2) + 3*A*x0*(x1**2) - 3*A*x1*(x0**2) + l2*x0*x1 - l1*x1
        l1 = 3*A*(x1**2) + 2*B*x1 + c
        l2 = 6*A*x1 + 2*B
    return A*(x**3) + B*(x**2)+c*x + d



######–ú–ê–ö–°–ò–ú–ê–ê–õ–¨–ù–û–ï –û–¢–ö–õ–û–ù–ï–ù–ò–ï:
def R(a, b, m, f1, f2, n):
    r = lambda x: abs(f1(x) - f2(f1, x, n, a, b))
    X = np.linspace(a, b, m)
    Mx = np.max(list(map(r, X)))
    return Mx
#





####–ö–û–ù–°–¢–ê–ù–¢–´ –ó–ê–î–ê–ù–ò–Ø
#
f = lambda x: np.log10(x) + 7/(2*x+6)                #–§–£–ù–ö–¶–ò–ô (–ù–û–ú–ï–† –í –ì–†–£–ü–ü–ï - 5)
A = 1                                                   #–û–¢–ï–ó–û–ö
B = 100                                              #–ò–ù–¢–ï–†–ü–û–õ–Ø–¶–ò–ò
X = 51                                                  #–°–õ–£–ß–ê–ô–ù–ê–Ø –¢–û–ß–ö–ê –ù–ê –û–¢–†–ï–ó–ö–ï –ò–ù–¢–ï–†–ü–û–õ–ò–†–û–í–ê–ù–ò–Ø
N = 3
M = 1000                                              #–ö–û–õ–ò–ß–ï–°–¢–í–û –¢–ï–°–¢–û–í–´–• –¢–û–ß–ï–ö (M >> N)
#


#X = np.linspace(A, B, M)
#Y_Ln = list(map(lambda x: abs(f(x) - Ln(f, x, N, A, B)), X))
#Y_LnOpt = list(map(lambda x: abs(f(x) - LnOpt(f, x, N, A, B)), X))
#Y_Sp32 = list( map(lambda x: abs(f(x) - Sp32(f, x, N, A, B)), X) )
#Y_Sp32Opt = list( map(lambda x: abs(f(x) - Sp32Opt(f, x, N, A, B)), X) )


#fig, axs = pl.subplots(2)
#fig.suptitle('–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è –∫—É–±–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–ª–∞–π–Ω–∞ S3,2 –∏ –ø–æ–ª–∏–Ω–æ–º–∞ –õ–∞–≥—Ä–∞–Ω–∂–∞')
#axs[0].plot(X, Y_Ln, 'b-', label = '–õ–∞–≥—Ä–∞–Ω–∂')
#axs[0].plot(X, Y_Sp32, 'r-', label = '–°–ø–ª–∞–π–Ω 3,2')
#axs[0].set_title('–î–ª—è —Ä–∞–≤–Ω–æ–æ—Ç—Å—Ç–æ—è—â–∏—Ö —É–∑–ª–æ–≤')
#pl.legend()

#axs[1].plot(X, Y_LnOpt, 'b-', label = '–õ–∞–≥—Ä–∞–Ω–∂')
#axs[1].plot(X, Y_Sp32Opt, 'r-', label = '–°–ø–ª–∞–π–Ω 3,2')
#axs[1].set_title('–î–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤')

#pl.legend()
#pl.show()




#print('Interpolated function: ', f(X))
#print(Sp32Opt(f, X, N, A, B))


#X = np.linspace(A, B, M)
#Y = list(map(f, X))
#Y_Sp32 = list( map( lambda x: Ln(f, x, N, A, B), X) )
#pl.plot(X, Y, 'k', X, Y_Sp32, 'b-')
#pl.show()


###–ö–û–î:
print('Interpolated function: ', f(X))
print()
print('Lagrange: ', Ln(f, X, N, A, B))
print('LagrangeOpt: ', LnOpt(f, X, N, A, B))
print('Newton: ', Newton(f, X, N, A, B))
print('NewtonOpt: ', NewtonOpt(f, X, N, A, B))
print('Spline 1,0: ', Sp10(f, X, N, A, B))
print('Spline 2,1: ', Sp21(f, X, N, A, B))
print('Spline 3,2: ', Sp32(f, X, N, A, B))
print('SplineOpt 1,0: ', Sp10Opt(f, X, N, A, B))
print('SplineOpt 2,1: ', Sp21Opt(f, X, N, A, B))
print('SplineOpt 3,2: ', Sp32Opt(f, X, N, A, B))
print()

print('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ')
print('Lagrange: ', R(A, B, M, f, Ln, N))
print('LagrngeN: ', R(A, B, M, f, LnOpt, N))
print('Newton: ', R(A, B, M, f, Newton, N))
print('NewtonOpt: ', R(A, B, M, f, NewtonOpt, N))
print('Spline 1,0: ', R(A, B, M, f, Sp10, N))
print('Spline 2,1: ', R(A, B, M, f, Sp21, N))
print('Spline 3,2: ', R(A, B, M, f, Sp32, N))
print('SplineOpt 1,0: ', R(A, B, M, f, Sp10Opt, N))
print('SplineOpt 2,1: ', R(A, B, M, f, Sp21Opt, N))
print('SplineOpt 3,2: ', R(A, B, M, f, Sp32Opt, N))

#X = np.linspace(A, B, M)
#Y = list(map(f, X))
#Y_Newton = list( map( lambda x: Newton(f, x, N, A, B), X) )
#Y_NewtonOpt = list( map( lambda x: NewtonOpt(f, x, N, A, B), X))
#pl.plot(X, Y, 'k', X, Y_Newton, 'b-', X, Y_NewtonOpt, 'r--')
#pl.show()

#l = []
#for i in range(2, 21):
#    l.append([i, M, R(A, B, M, f, Sp10, i), R(A, B, M, f, Sp10Opt, i)])
#df = pd.DataFrame(l, columns=['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ (n)', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ (m)', '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (ùëπnewtonn)', '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (ùëπnewtonoptn)'])
#df.to_excel("results10.xlsx")

#–ö–û–î –î–õ–Ø –í–´–í–û–î–ê –ì–†–ê–§–ò–ö–ê –ò –°–û–•–†–ê–ù–ï–ù–ò–Ø –¢–ê–ë–õ–ò–¶–´:
#print(f(X))
#print(Ln(f, X, N, A, B))
#print(Loptn(f, X, N, A, B))

#print(R(A, B, M, f, Ln, N))
#print(R(A, B, M, f, Loptn, N))

#X = np.linspace(A, B, M)
#Y = list(map(f, X))
#Y_NewtonOpt3 = list( map( lambda x: NewtonOpt(f, x, 3, A, B), X) )
#Y_NewtonOpt10 = list( map( lambda x: NewtonOpt(f, x, 10, A, B), X))
#Y_NewtonOpt50 = list( map( lambda x: NewtonOpt(f, x, 30, A, B), X))
#pl.plot(X, Y, 'k', label = 'Interpolated function')
#pl.plot(X, Y_NewtonOpt3, 'b--', label = 'NewtonOpt3')
#pl.plot(X, Y_NewtonOpt10, 'r--', label = 'NewtonOpt10')
#pl.plot(X, Y_NewtonOpt50, 'g--', label = 'NewtonOpt30')
#pl.legend()
#pl.show()

#L = []
#for i in range(2, 21):
#    L.append([i, M, R(A, B, M, f, Sp32, i), R(A, B, M, f, Sp32Opt, i)])
#df = pd.DataFrame(L, columns=['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ (n)', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫ (m)', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (ùëπSp32)', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (ùëπSp32Opt)'])
#df.to_excel("Results32.xlsx")
